import SetField(int, name) as SetField;				       //field initialization 	
import SourceField(int, int, value, name) as SourceField;	       //field perturbation									
import InitSplitsAndIters(name, int, name, int, name, int) as Init;    //number of iterations, field splits and ensemble initialization 
import CollideCells(int, value, name, name, name) as Collide;	       //collide cells
import FillEdges(int, value, value, value, name) as FillEdges;	       //assembly split with shadow edges
import AssemblyNewLayer(int, value, name) as NewLayer;	 	       //assembly new layer
import Calculation(int, int, int, value, value, name) as Calc;	       //calculation of density, rest and move
import InitFiction(name) as Fict;				       //create a dummy vector

sub main()
{
	df iters, splits, max_ensemble, field, DenMoveRest, x;		//number of iterations, field splits and ensemble, computational field, vector for Density, Move and Rest, auxiliary vector
	
	Init(iters, 500, splits, 3, max_ensemble, 2);			//set value of iterations, field splits and ensemble max value

	//ensemble iteration
	for k=1..max_ensemble	
	{

		//field initialization 	
		for n=1..splits							
		{
			SetField(n, field[k][0][n]);			 //field[ensemble][layer][split]
		}

		//iterative process
		for j=1..iters							
		{

			//create a field perturbation
			for n=1..splits							
			{
				SourceField(n, j, field[k][j*4 - 4][n], field[k][j*4 - 3][n]);	
			}
			
			
			//collision of cells in one split
			for n=1..splits						
			{	
				//number of split, old field[layer][split] layer, new field[layer+1][split] layer,
				//upper edge[layer][split][0] of the new field, lower edge[layer][split][1] of the newfield
				Collide(n, field[k][j*4 - 3][n], field[k][j*4 - 2][n], field[k][j*4 - 2][n][0], field[k][j*4 - 2][n][1]);
			}
			
			//assembly splits with shadow edges										
				//first split
			FillEdges(1, field[k][j*4 - 2][1], field[k][j*4 - 2][splits][1], field[k][j*4 - 2][2][0], field[k][j*4 - 1][1]);
				//last split
			FillEdges(splits, field[k][j*4 - 2][splits], field[k][j*4 - 2][splits - 1][1], field[k][j*4 - 2][1][0], field[k][j*4 - 1][splits]);		
			for n=2..splits-1
			{
				FillEdges(n, field[k][j*4 - 2][n], field[k][j*4 - 2][n-1][1], field[k][j*4 - 2][n+1][0], field[k][j*4 - 1][n]);
			}
			
			//assembly new layer
			for n=1..splits
			{
				NewLayer(n, field[k][j*4 - 1][n], field[k][j*4][n]); 
			}
			
			//create a a dummy vector
			if ((j%10 == 0) && (k == 1))
			{			
				Fict(DenMoveRest[k - 1][j][splits]);// k - endemble; j - iter; n - split
			}
			
			//calc density, rest, move
			//save to files
			if (j%10 == 0)
			{	
				Calc(k, 1, j, field[k][j*4][1], DenMoveRest[k - 1][j][splits], DenMoveRest[k][j][1]) >> (x[k][j][1]);
				for n=2..splits
				{
					if (x[k][j][n - 1])
					Calc(k, n, j, field[k][j*4][n], DenMoveRest[k][j][n-1], DenMoveRest[k][j][n]) >> (x[k][j][n]);
				}
			}
			
		}
	}
}

